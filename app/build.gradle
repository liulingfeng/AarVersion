apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

def ext = rootProject.extensions.getByName("ext")
def versionConfig = ext.android
def androidDependencies = ext.dependencies
def testDependencies = ext.testDependencies

android {
    compileSdkVersion versionConfig.compileSdk
    buildToolsVersion versionConfig.buildTools
    defaultConfig {
        applicationId "com.lxs.mstaar"
        minSdkVersion versionConfig.minSdk
        targetSdkVersion versionConfig.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        sign_config {
            keyAlias 'mistong'
            keyPassword 'mstandroid2015'
            storeFile file('../app/keystore')
            storePassword 'mstandroid2015'
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.sign_config
            shrinkResources true
            debuggable false
        }
        debug {
            signingConfig signingConfigs.sign_config
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            shrinkResources false
            debuggable true
        }
    }

    useLibrary 'org.apache.http.legacy'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

configurations {
    all*.exclude group: 'com.lxs.android', module: 'common'
    all*.exclude group: 'com.lxs.android', module: 'core'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation androidDependencies.kotlin
    implementation androidDependencies.appcompat
    implementation androidDependencies.core
    implementation androidDependencies.constraintlayout
    testImplementation testDependencies.testJunit
    androidTestImplementation testDependencies.androidTestJunit
    androidTestImplementation testDependencies.espressoCore

    implementation project(":pay")
    //依赖分析问题解决
    implementation project(":career")
    implementation project(":common")
    implementation project(":core")
}

dynamicDependency {
    pay {
        debuggable = isSourceBuild("payIsDebug")
        groupId = "com.lxs.android"
        artifactId = "pay"
        version = loadAARVersion("payVersion")
    }

    career {
        debuggable = isSourceBuild("careerIsDebug")
        groupId = "com.lxs.android"
        artifactId = "career"
        version = loadAARVersion("careerVersion")
    }

    common {
        debuggable = isSourceBuild("commonIsDebug")
        groupId = "com.lxs.android"
        artifactId = "common"
        version = loadAARVersion("commonVersion")
    }

    core {
        debuggable = isSourceBuild("coreIsDebug")
        groupId = "com.lxs.android"
        artifactId = "core"
        version = loadAARVersion("coreVersion")
    }
}

def loadAARVersion(String name) {
    File localFile = project.rootProject.file('local.properties')
    File remoteFile = project.rootProject.file('version.properties')
    if (localFile.exists() && remoteFile.exists()) {
        Properties properties = new Properties()
        properties.load(localFile.newDataInputStream())
        def version = properties.getProperty('localVersion')
        if (version == null) {
            properties.load(remoteFile.newDataInputStream())
            version = properties.getProperty(name)
        }
        return version
    }
}

def isSourceBuild(String name) {
    File localFile = project.rootProject.file('local.properties')
    File remoteFile = project.rootProject.file('version.properties')
    if (localFile.exists() && remoteFile.exists()) {
        Properties properties = new Properties()
        properties.load(localFile.newDataInputStream())
        def isDebug = properties.getProperty(name)
        if (isDebug == null) {
            properties.load(remoteFile.newDataInputStream())
            isDebug = properties.getProperty(name, "true")
        }
        return isDebug.toBoolean()
    }
}